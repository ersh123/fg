#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
validate_fixes.py - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_config():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===")
    
    try:
        from config import APP_CONFIG, COLORS, FONTS
        print("‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º APP_CONFIG
        if 'title' in APP_CONFIG:
            print(f"‚úì APP_CONFIG['title']: {APP_CONFIG['title']}")
        else:
            print("‚úó APP_CONFIG['title'] –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç–∞
        required_colors = ['white', 'primary', 'secondary', 'text', 'danger', 
                          'primary_dark', 'primary_darker', 'secondary_dark', 'secondary_darker']
        
        missing_colors = []
        for color in required_colors:
            if color in COLORS:
                print(f"‚úì COLORS['{color}']: {COLORS[color]}")
            else:
                missing_colors.append(color)
                print(f"‚úó COLORS['{color}'] –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        if missing_colors:
            print(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ü–≤–µ—Ç–∞: {missing_colors}")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_ui_components():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ===")
    
    try:
        from ui_components import ModernButton
        print("‚úì ModernButton –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É –±–µ–∑ GUI
        import tkinter as tk
        root = tk.Tk()
        root.withdraw()  # –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫
        styles = ['primary', 'secondary', 'success', 'danger']
        for style in styles:
            try:
                btn = ModernButton(root, text=f"Test {style}", style=style)
                print(f"‚úì –ö–Ω–æ–ø–∫–∞ —Å—Ç–∏–ª—è '{style}' —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ '{style}': {e}")
                root.destroy()
                return False
        
        root.destroy()
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è UI: {e}")
        return False

def test_main_app():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è GUI
        from main import LogoMasterApp
        print("‚úì LogoMasterApp –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä (–Ω–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º GUI)
        import tkinter as tk
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π root –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_root = tk.Tk()
        test_root.withdraw()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–∫–Ω–∞
        from config import APP_CONFIG
        test_root.title(APP_CONFIG['title'])  # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å
        print(f"‚úì –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {APP_CONFIG['title']}")
        
        test_root.destroy()
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π LogoMaster Pro...\n")
    
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", test_ui_components),
        ("–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", test_main_app)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                print(f"\n‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"\n‚ùå {test_name}: –ù–ï –ü–†–û–ô–î–ï–ù")
        except Exception as e:
            print(f"\n‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    print(f"\n{'='*50}")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É.")
        return True
    else:
        print("‚ö†Ô∏è  –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)