# -*- coding: utf-8 -*-
"""
main.py - –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è LogoMaster Pro

–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º:
- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
- –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π UI —Å drag & drop
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import threading
import os
import sys
from pathlib import Path
from typing import List, Optional, Dict, Any
from PIL import Image, ImageTk

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from config import (
    APP_CONFIG, COLORS, FONTS, SIZES, UI_CONFIG, MESSAGES,
    get_config, logger, setup_logging
)
from image_processor import ImageProcessor
from ui_components import (
    ModernButton, ImageViewer, ProgressDialog, 
    SettingsPanel, StatusBar
)
from utils import (
    ensure_directory, validate_image_file, create_backup,
    create_zip_archive, get_unique_filename, format_file_size,
    PerformanceTimer, cleanup_temp_directory
)

class LogoMasterApp:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è LogoMaster Pro
    """
    
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        setup_logging()
        logger.info("–ó–∞–ø—É—Å–∫ LogoMaster Pro")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.image_processor = ImageProcessor()
        self.current_images = []  # –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.current_image_index = 0
        self.processed_images = {}  # –ö—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.logo_loaded = False
        self.is_processing = False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.root = tk.Tk()
        self._setup_window()
        self._create_ui()
        self._setup_drag_drop()
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        cleanup_temp_directory()
        
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    
    def _setup_window(self):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        """
        self.root.title(APP_CONFIG['title'])
        self.root.geometry(f"{APP_CONFIG['window_size'][0]}x{APP_CONFIG['window_size'][1]}")
        self.root.minsize(800, 600)
        self.root.configure(bg=COLORS['background'])
        
        # –ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            icon_path = get_config('paths')['assets_dir'] / 'icon.ico'
            if icon_path.exists():
                self.root.iconbitmap(str(icon_path))
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∫–æ–Ω–∫—É: {e}")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.root.protocol("WM_DELETE_WINDOW", self._on_closing)
    
    def _create_ui(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        """
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = tk.Frame(self.root, bg=COLORS['background'])
        main_container.pack(fill='both', expand=True)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self._create_toolbar(main_container)
        self._create_main_content(main_container)
        self._create_status_bar(main_container)
    
    def _create_toolbar(self, parent):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        """
        toolbar = tk.Frame(parent, bg=COLORS['secondary'], height=60)
        toolbar.pack(fill='x', pady=(0, 1))
        toolbar.pack_propagate(False)
        
        # –õ–µ–≤–∞—è –≥—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫
        left_frame = tk.Frame(toolbar, bg=COLORS['secondary'])
        left_frame.pack(side='left', padx=10, pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.load_images_btn = ModernButton(
            left_frame,
            text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            command=self._load_images,
            style="primary",
            width=20
        )
        self.load_images_btn.pack(side='left', padx=(0, 5))
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞
        self.load_logo_btn = ModernButton(
            left_frame,
            text="üè∑Ô∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø",
            command=self._load_logo,
            style="secondary",
            width=18
        )
        self.load_logo_btn.pack(side='left', padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞
        self.apply_logo_btn = ModernButton(
            left_frame,
            text="‚ú® –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø",
            command=self._apply_logo_to_current,
            style="success",
            width=18,
            state='disabled'
        )
        self.apply_logo_btn.pack(side='left', padx=5)
        
        # –ü—Ä–∞–≤–∞—è –≥—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫
        right_frame = tk.Frame(toolbar, bg=COLORS['secondary'])
        right_frame.pack(side='right', padx=10, pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.batch_btn = ModernButton(
            right_frame,
            text="‚ö° –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
            command=self._batch_process,
            style="primary",
            width=20,
            state='disabled'
        )
        self.batch_btn.pack(side='right', padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.save_btn = ModernButton(
            right_frame,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            command=self._show_save_menu,
            style="success",
            width=15,
            state='disabled'
        )
        self.save_btn.pack(side='right', padx=5)
    
    def _create_main_content(self, parent):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        """
        content_frame = tk.Frame(parent, bg=COLORS['background'])
        content_frame.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
        left_panel = tk.Frame(content_frame, bg=COLORS['surface'], width=300)
        left_panel.pack(side='left', fill='y', padx=(0, 5))
        left_panel.pack_propagate(False)
        
        self._create_left_panel(left_panel)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
        right_panel = tk.Frame(content_frame, bg=COLORS['surface'])
        right_panel.pack(side='right', fill='both', expand=True)
        
        self._create_right_panel(right_panel)
    
    def _create_left_panel(self, parent):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        """
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏
        header = tk.Label(
            parent,
            text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            font=FONTS['heading'],
            fg=COLORS['text'],
            bg=COLORS['surface']
        )
        header.pack(pady=10, padx=10, anchor='w')
        
        # –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–≥–æ—Ç–∏–ø–∞
        self.settings_panel = SettingsPanel(
            parent,
            on_change_callback=self._on_settings_change,
            bg=COLORS['surface']
        )
        self.settings_panel.pack(fill='x', padx=10, pady=(0, 10))
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = tk.Frame(parent, height=1, bg=COLORS['border'])
        separator.pack(fill='x', padx=10, pady=10)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        info_frame = tk.Frame(parent, bg=COLORS['surface'])
        info_frame.pack(fill='x', padx=10, pady=(0, 10))
        
        info_label = tk.Label(
            info_frame,
            text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏",
            font=FONTS['text'],
            fg=COLORS['text'],
            bg=COLORS['surface']
        )
        info_label.pack(anchor='w', pady=(0, 5))
        
        self.info_text = tk.Text(
            info_frame,
            height=8,
            width=35,
            font=FONTS['small'],
            fg=COLORS['text'],
            bg=COLORS['background'],
            relief='flat',
            borderwidth=1,
            state='disabled'
        )
        self.info_text.pack(fill='x')
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        nav_frame = tk.Frame(parent, bg=COLORS['surface'])
        nav_frame.pack(fill='x', padx=10, pady=10)
        
        nav_label = tk.Label(
            nav_frame,
            text="–ù–∞–≤–∏–≥–∞—Ü–∏—è",
            font=FONTS['text'],
            fg=COLORS['text'],
            bg=COLORS['surface']
        )
        nav_label.pack(anchor='w', pady=(0, 5))
        
        nav_buttons = tk.Frame(nav_frame, bg=COLORS['surface'])
        nav_buttons.pack(fill='x')
        
        self.prev_btn = ModernButton(
            nav_buttons,
            text="‚óÄ –ü—Ä–µ–¥—ã–¥—É—â–µ–µ",
            command=self._prev_image,
            style="secondary",
            state='disabled'
        )
        self.prev_btn.pack(side='left', fill='x', expand=True, padx=(0, 2))
        
        self.next_btn = ModernButton(
            nav_buttons,
            text="–°–ª–µ–¥—É—é—â–µ–µ ‚ñ∂",
            command=self._next_image,
            style="secondary",
            state='disabled'
        )
        self.next_btn.pack(side='right', fill='x', expand=True, padx=(2, 0))
        
        # –°—á–µ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.image_counter = tk.Label(
            nav_frame,
            text="0 / 0",
            font=FONTS['small'],
            fg=COLORS['text_secondary'],
            bg=COLORS['surface']
        )
        self.image_counter.pack(pady=(5, 0))
    
    def _create_right_panel(self, parent):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = tk.Frame(parent, bg=COLORS['surface'], height=40)
        header_frame.pack(fill='x', padx=10, pady=(10, 0))
        header_frame.pack_propagate(False)
        
        header_label = tk.Label(
            header_frame,
            text="–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
            font=FONTS['heading'],
            fg=COLORS['text'],
            bg=COLORS['surface']
        )
        header_label.pack(side='left', pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
        view_controls = tk.Frame(header_frame, bg=COLORS['surface'])
        view_controls.pack(side='right', pady=5)
        
        self.zoom_in_btn = ModernButton(
            view_controls,
            text="üîç+",
            command=self._zoom_in,
            style="secondary",
            width=5
        )
        self.zoom_in_btn.pack(side='left', padx=2)
        
        self.zoom_out_btn = ModernButton(
            view_controls,
            text="üîç-",
            command=self._zoom_out,
            style="secondary",
            width=5
        )
        self.zoom_out_btn.pack(side='left', padx=2)
        
        self.fit_btn = ModernButton(
            view_controls,
            text="üìê",
            command=self._fit_to_window,
            style="secondary",
            width=5
        )
        self.fit_btn.pack(side='left', padx=2)
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        viewer_frame = tk.Frame(parent, bg=COLORS['background'])
        viewer_frame.pack(fill='both', expand=True, padx=10, pady=(5, 10))
        
        self.image_viewer = ImageViewer(viewer_frame, bg=COLORS['background'])
        self.image_viewer.pack(fill='both', expand=True)
    
    def _create_status_bar(self, parent):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        """
        self.status_bar = StatusBar(parent)
        self.status_bar.pack(fill='x', side='bottom')
        self.status_bar.set_status(MESSAGES['ready'])
    
    def _setup_drag_drop(self):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag & drop —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        """
        try:
            # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è drag & drop —á–µ—Ä–µ–∑ tkinter
            self.root.drop_target_register('DND_Files')
            self.root.dnd_bind('<<Drop>>', self._on_drop)
        except Exception as e:
            logger.debug(f"Drag & drop –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {e}")
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏
            self._setup_alternative_drop()
    
    def _setup_alternative_drop(self):
        """
        –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è drag & drop
        """
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.image_viewer.bind('<Button-1>', self._on_click_for_file_dialog)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        drop_hint = tk.Label(
            self.image_viewer,
            text="–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤\n–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'",
            font=FONTS['text'],
            fg=COLORS['text_secondary'],
            bg=COLORS['background']
        )
        drop_hint.place(relx=0.5, rely=0.5, anchor='center')
        self.drop_hint = drop_hint
    
    def _on_click_for_file_dialog(self, event):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
        """
        if not self.current_images:
            self._load_images()
    
    def _on_drop(self, event):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è drop
        """
        try:
            files = event.data.split()
            image_files = []
            
            for file_path in files:
                file_path = file_path.strip('{}"')  # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                if os.path.isfile(file_path):
                    is_valid, _ = validate_image_file(file_path)
                    if is_valid:
                        image_files.append(file_path)
                elif os.path.isdir(file_path):
                    # –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                    dir_images = self.image_processor.load_images_from_directory(file_path)
                    image_files.extend(dir_images)
            
            if image_files:
                self._load_image_files(image_files)
            else:
                messagebox.showwarning(
                    "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                    "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ drop: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
    
    def _load_images(self):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥
        """
        try:
            file_types = [
                ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.jpg *.jpeg *.png *.bmp *.tiff *.gif"),
                ("JPEG", "*.jpg *.jpeg"),
                ("PNG", "*.png"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
            
            files = filedialog.askopenfilenames(
                title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                filetypes=file_types,
                initialdir=get_config('paths')['last_open_dir']
            )
            
            if files:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                last_dir = os.path.dirname(files[0])
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                
                self._load_image_files(list(files))
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
    
    def _load_image_files(self, file_paths: List[str]):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        Args:
            file_paths: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
        """
        try:
            valid_files = []
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
            for file_path in file_paths:
                is_valid, error_msg = validate_image_file(file_path)
                if is_valid:
                    valid_files.append(file_path)
                else:
                    logger.warning(f"–ü—Ä–æ–ø—É—Å–∫ —Ñ–∞–π–ª–∞ {file_path}: {error_msg}")
            
            if not valid_files:
                messagebox.showwarning(
                    "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                    "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
                )
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            self.current_images = valid_files
            self.current_image_index = 0
            self.processed_images.clear()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            self._update_ui_state()
            self._display_current_image()
            self._update_image_info()
            
            # –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            if hasattr(self, 'drop_hint'):
                self.drop_hint.place_forget()
            
            self.status_bar.set_status(
                f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(valid_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                f"–†–∞–∑–º–µ—Ä: {sum(os.path.getsize(f) for f in valid_files) / (1024*1024):.1f} –ú–ë"
            )
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(valid_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
    
    def _load_logo(self):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞
        """
        try:
            file_types = [
                ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤", "*.png *.jpg *.jpeg *.bmp"),
                ("PNG (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", "*.png"),
                ("JPEG", "*.jpg *.jpeg"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
            
            file_path = filedialog.askopenfilename(
                title="–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø",
                filetypes=file_types,
                initialdir=get_config('paths')['last_logo_dir']
            )
            
            if file_path:
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ª–æ–≥–æ—Ç–∏–ø
                is_valid, error_msg = validate_image_file(file_path)
                if not is_valid:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª –ª–æ–≥–æ—Ç–∏–ø–∞: {error_msg}")
                    return
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø
                if self.image_processor.load_logo(file_path):
                    self.logo_loaded = True
                    self._update_ui_state()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    logo_name = os.path.basename(file_path)
                    self.status_bar.set_status(
                        f"–õ–æ–≥–æ—Ç–∏–ø –∑–∞–≥—Ä—É–∂–µ–Ω: {logo_name}",
                        f"–†–∞–∑–º–µ—Ä: {format_file_size(os.path.getsize(file_path))}"
                    )
                    
                    logger.info(f"–õ–æ–≥–æ—Ç–∏–ø –∑–∞–≥—Ä—É–∂–µ–Ω: {file_path}")
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞: {e}")
    
    def _apply_logo_to_current(self):
        """
        –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ –∫ —Ç–µ–∫—É—â–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        """
        if not self.current_images or not self.logo_loaded:
            return
        
        try:
            current_file = self.current_images[self.current_image_index]
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –≤ –∫—ç—à–µ
            if current_file not in self.processed_images:
                image = self.image_processor.load_image(current_file)
                if image is None:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                    return
            else:
                image = self.processed_images[current_file]['original']
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = self.settings_panel.get_settings()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–æ—Ç–∏–ø
            with PerformanceTimer("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞") as timer:
                processed_image = self.image_processor.apply_logo(image, **settings)
            
            if processed_image:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                self.processed_images[current_file] = {
                    'original': image,
                    'processed': processed_image,
                    'settings': settings.copy()
                }
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self._display_processed_image(processed_image)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º UI
                self._update_ui_state()
                
                self.status_bar.set_status(
                    "–õ–æ–≥–æ—Ç–∏–ø –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é",
                    f"–í—Ä–µ–º—è: {timer.get_duration():.2f} —Å–µ–∫"
                )
                
                logger.info(f"–õ–æ–≥–æ—Ç–∏–ø –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ {current_file}")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞: {e}")
    
    def _batch_process(self):
        """
        –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        if not self.current_images or not self.logo_loaded:
            return
        
        try:
            # –í—ã–±–∏—Ä–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            output_dir = filedialog.askdirectory(
                title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                initialdir=get_config('paths')['last_save_dir']
            )
            
            if not output_dir:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = self.settings_panel.get_settings()
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_dialog = ProgressDialog(
                self.root,
                "–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π..."
            )
            
            def progress_callback(current, total, message):
                if not progress_dialog.is_cancelled():
                    progress_dialog.update_progress(current, total, message)
            
            def process_thread():
                try:
                    self.is_processing = True
                    self._update_ui_state()
                    
                    with PerformanceTimer("–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞") as timer:
                        processed_files = self.image_processor.batch_process(
                            self.current_images,
                            output_dir,
                            progress_callback,
                            **settings
                        )
                    
                    if not progress_dialog.is_cancelled():
                        progress_dialog.close()
                        
                        if processed_files:
                            messagebox.showinfo(
                                "–£—Å–ø–µ—Ö",
                                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(processed_files)} –∏–∑ {len(self.current_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
                                f"–í—Ä–µ–º—è: {timer.get_duration():.1f} —Å–µ–∫\n"
                                f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}"
                            )
                            
                            self.status_bar.set_status(
                                f"–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(processed_files)} —Ñ–∞–π–ª–æ–≤",
                                f"–í—Ä–µ–º—è: {timer.get_duration():.1f} —Å–µ–∫"
                            )
                        else:
                            messagebox.showwarning(
                                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                            )
                    
                except Exception as e:
                    progress_dialog.close()
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                
                finally:
                    self.is_processing = False
                    self.root.after(0, self._update_ui_state)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            thread = threading.Thread(target=process_thread, daemon=True)
            thread.start()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
    
    def _show_save_menu(self):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        menu = tk.Menu(self.root, tearoff=0)
        
        menu.add_command(
            label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            command=self._save_current_image
        )
        
        menu.add_command(
            label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ",
            command=self._save_all_processed
        )
        
        menu.add_separator()
        
        menu.add_command(
            label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–∞–ø–∫—É",
            command=self._save_to_folder
        )
        
        menu.add_command(
            label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ ZIP –∞—Ä—Ö–∏–≤",
            command=self._save_to_zip
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–æ–π
        try:
            x = self.save_btn.winfo_rootx()
            y = self.save_btn.winfo_rooty() + self.save_btn.winfo_height()
            menu.post(x, y)
        except:
            menu.post(self.root.winfo_pointerx(), self.root.winfo_pointery())
    
    def _save_current_image(self):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        if not self.current_images:
            return
        
        current_file = self.current_images[self.current_image_index]
        if current_file not in self.processed_images:
            messagebox.showwarning(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                "–¢–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
            )
            return
        
        try:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            original_name = Path(current_file).stem
            default_name = f"{original_name}_with_logo.jpg"
            
            file_path = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                defaultextension=".jpg",
                initialfilename=default_name,
                filetypes=[
                    ("JPEG", "*.jpg"),
                    ("PNG", "*.png"),
                    ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
                ]
            )
            
            if file_path:
                processed_image = self.processed_images[current_file]['processed']
                
                if self.image_processor.save_image(processed_image, file_path):
                    self.status_bar.set_status(
                        f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {os.path.basename(file_path)}",
                        f"–†–∞–∑–º–µ—Ä: {format_file_size(os.path.getsize(file_path))}"
                    )
                    logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path}")
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def _save_all_processed(self):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        if not self.processed_images:
            messagebox.showwarning(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                "–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
            )
            return
        
        try:
            output_dir = filedialog.askdirectory(
                title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
            )
            
            if not output_dir:
                return
            
            saved_count = 0
            
            for file_path, data in self.processed_images.items():
                try:
                    original_name = Path(file_path).stem
                    save_name = get_unique_filename(
                        output_dir,
                        f"{original_name}_with_logo",
                        ".jpg"
                    )
                    save_path = os.path.join(output_dir, save_name)
                    
                    if self.image_processor.save_image(data['processed'], save_path):
                        saved_count += 1
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {file_path}: {e}")
            
            if saved_count > 0:
                messagebox.showinfo(
                    "–£—Å–ø–µ—Ö",
                    f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –∏–∑ {len(self.processed_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
                    f"–ü–∞–ø–∫–∞: {output_dir}"
                )
                
                self.status_bar.set_status(
                    f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                    f"–ü–∞–ø–∫–∞: {os.path.basename(output_dir)}"
                )
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def _save_to_folder(self):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
        """
        self._save_all_processed()
    
    def _save_to_zip(self):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ ZIP –∞—Ä—Ö–∏–≤
        """
        if not self.processed_images:
            messagebox.showwarning(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                "–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
            )
            return
        
        try:
            zip_path = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—Ä—Ö–∏–≤",
                defaultextension=".zip",
                initialfilename="processed_images.zip",
                filetypes=[("ZIP –∞—Ä—Ö–∏–≤—ã", "*.zip")]
            )
            
            if not zip_path:
                return
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            temp_dir = get_config('paths')['temp_dir'] / 'zip_export'
            ensure_directory(str(temp_dir))
            
            temp_files = []
            
            try:
                for file_path, data in self.processed_images.items():
                    original_name = Path(file_path).stem
                    temp_name = f"{original_name}_with_logo.jpg"
                    temp_path = temp_dir / temp_name
                    
                    if self.image_processor.save_image(data['processed'], str(temp_path)):
                        temp_files.append(str(temp_path))
                
                # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
                if create_zip_archive(temp_files, zip_path):
                    messagebox.showinfo(
                        "–£—Å–ø–µ—Ö",
                        f"–ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {os.path.basename(zip_path)}\n"
                        f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(temp_files)}"
                    )
                    
                    self.status_bar.set_status(
                        f"–ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {os.path.basename(zip_path)}",
                        f"–†–∞–∑–º–µ—Ä: {format_file_size(os.path.getsize(zip_path))}"
                    )
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤")
                    
            finally:
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                for temp_file in temp_files:
                    try:
                        os.remove(temp_file)
                    except:
                        pass
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: {e}")
    
    def _display_current_image(self):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        if not self.current_images:
            return
        
        try:
            current_file = self.current_images[self.current_image_index]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
            if current_file in self.processed_images:
                image = self.processed_images[current_file]['processed']
            else:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image = self.image_processor.load_image(current_file)
                if image is None:
                    self.image_viewer.show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                    return
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.image_viewer.display_image(image)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            self.image_viewer.show_error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    
    def _display_processed_image(self, image: Image.Image):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            image: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        """
        try:
            self.image_viewer.display_image(image)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    
    def _prev_image(self):
        """
        –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        """
        if self.current_images and self.current_image_index > 0:
            self.current_image_index -= 1
            self._display_current_image()
            self._update_image_info()
            self._update_navigation_state()
    
    def _next_image(self):
        """
        –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        """
        if self.current_images and self.current_image_index < len(self.current_images) - 1:
            self.current_image_index += 1
            self._display_current_image()
            self._update_image_info()
            self._update_navigation_state()
    
    def _zoom_in(self):
        """
        –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞
        """
        # –≠–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–æ–ª–µ—Å–∞ –º—ã—à–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è
        event = type('Event', (), {'delta': 120, 'num': 4})()
        self.image_viewer._zoom(event)
    
    def _zoom_out(self):
        """
        –£–º–µ–Ω—å—à–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞
        """
        # –≠–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–æ–ª–µ—Å–∞ –º—ã—à–∏ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è
        event = type('Event', (), {'delta': -120, 'num': 5})()
        self.image_viewer._zoom(event)
    
    def _fit_to_window(self):
        """
        –ü–æ–¥–≥–æ–Ω–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        """
        if self.image_viewer.current_image:
            self.image_viewer.zoom_factor = 1.0
            self.image_viewer.display_image(self.image_viewer.current_image)
    
    def _update_image_info(self):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        """
        try:
            self.info_text.config(state='normal')
            self.info_text.delete(1.0, tk.END)
            
            if self.current_images:
                current_file = self.current_images[self.current_image_index]
                info = self.image_processor.get_image_info(current_file)
                
                info_lines = [
                    f"–§–∞–π–ª: {os.path.basename(current_file)}",
                    f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {format_file_size(info['file_size'])}",
                    f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {info['dimensions'][0]}x{info['dimensions'][1]}" if info['dimensions'] else "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                    f"–§–æ—Ä–º–∞—Ç: {info['format'] or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
                    f"–†–µ–∂–∏–º: {info['mode'] or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
                    "",
                    f"–°—Ç–∞—Ç—É—Å: {'–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ' if current_file in self.processed_images else '–û—Ä–∏–≥–∏–Ω–∞–ª'}",
                ]
                
                if current_file in self.processed_images:
                    settings = self.processed_images[current_file]['settings']
                    info_lines.extend([
                        "",
                        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞:",
                        f"  –ü–æ–∑–∏—Ü–∏—è: {settings.get('position', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                        f"  –†–∞–∑–º–µ—Ä: {int(settings.get('size', 0) * 100)}%",
                        f"  –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å: {int(settings.get('opacity', 0) * 100)}%",
                        f"  –û—Ç—Å—Ç—É–ø: {settings.get('margin', 0)}px",
                    ])
                
                self.info_text.insert(tk.END, "\n".join(info_lines))
            
            self.info_text.config(state='disabled')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏: {e}")
    
    def _update_navigation_state(self):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        """
        if self.current_images:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            current = self.current_image_index + 1
            total = len(self.current_images)
            self.image_counter.config(text=f"{current} / {total}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
            self.prev_btn.config(state='normal' if self.current_image_index > 0 else 'disabled')
            self.next_btn.config(state='normal' if self.current_image_index < total - 1 else 'disabled')
        else:
            self.image_counter.config(text="0 / 0")
            self.prev_btn.config(state='disabled')
            self.next_btn.config(state='disabled')
    
    def _update_ui_state(self):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        """
        has_images = bool(self.current_images)
        has_logo = self.logo_loaded
        has_processed = bool(self.processed_images)
        is_processing = self.is_processing
        
        # –ö–Ω–æ–ø–∫–∏ –≤ toolbar
        self.load_images_btn.config(state='normal' if not is_processing else 'disabled')
        self.load_logo_btn.config(state='normal' if not is_processing else 'disabled')
        self.apply_logo_btn.config(
            state='normal' if (has_images and has_logo and not is_processing) else 'disabled'
        )
        self.batch_btn.config(
            state='normal' if (has_images and has_logo and not is_processing) else 'disabled'
        )
        self.save_btn.config(
            state='normal' if (has_processed and not is_processing) else 'disabled'
        )
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        self._update_navigation_state()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
        has_current_image = has_images and self.image_viewer.current_image is not None
        self.zoom_in_btn.config(state='normal' if has_current_image else 'disabled')
        self.zoom_out_btn.config(state='normal' if has_current_image else 'disabled')
        self.fit_btn.config(state='normal' if has_current_image else 'disabled')
    
    def _on_settings_change(self, settings: Dict[str, Any]):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        
        Args:
            settings: –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        """
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        # –∏–ª–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        pass
    
    def _on_closing(self):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –∏–¥–µ—Ç
            if self.is_processing:
                if messagebox.askokcancel(
                    "–í—ã—Ö–æ–¥",
                    "–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü—Ä–µ—Ä–≤–∞—Ç—å –∏ –≤—ã–π—Ç–∏?"
                ):
                    self.is_processing = False
                else:
                    return
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            cleanup_temp_directory()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            # self._save_settings()
            
            logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            self.root.destroy()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            self.root.destroy()
    
    def run(self):
        """
        –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            self.root.mainloop()
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            messagebox.showerror(
                "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:\n{e}\n\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ."
            )

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = LogoMasterApp()
        app.run()
        
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
        try:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        except:
            pass
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            import tkinter.messagebox as mb
            mb.showerror(
                "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n{e}\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É Python –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫."
            )
        except:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        sys.exit(1)

if __name__ == '__main__':
    main()